5. КЛИЕНТСКОЕ ПРИЛОЖЕНИЕ
Клиентское приложение является ключевым компонентом системы, предоставляющим конечным пользователям интерфейс для взаимодействия с сервисом доставки. Оно разработано как самостоятельное десктопное программное обеспечение, что обеспечивает стабильность работы и широкие возможности по созданию кастомизированного пользовательского интерфейса.
5.1. Архитектура и технологическая основа
Архитектурно клиентское приложение построено с использованием многоуровневого подхода, концептуально близкого к паттерну Model-View-Controller (MVC). Такое разделение позволяет изолировать логику представления данных, бизнес-логику и управление данными, что повышает модульность и упрощает дальнейшее сопровождение и развитие системы.
• Уровень представления (View): Отвечает за весь графический интерфейс пользователя (GUI). На этом уровне реализованы все окна, панели, и интерактивные элементы управления. Основной задачей этого слоя является отображение данных, полученных от бизнес-логики, и передача действий пользователя (клики мыши, ввод текста) на уровень управления.
• Уровень управления и бизнес-логики (Controller/Service): Этот слой является связующим звеном между представлением и моделью данных. Он обрабатывает все пользовательские запросы, выполняет необходимые бизнес-операции (например, расчет стоимости корзины, проверку наличия товара) и обращается к уровню доступа к данным для получения или сохранения информации.
• Уровень модели и доступа к данным (Model): Включает в себя классы, описывающие основные сущности системы (пользователь, товар, заказ), а также логику взаимодействия непосредственно с базой данных. Этот уровень инкапсулирует все SQL-запросы и управление транзакциями, предоставляя бизнес-логике удобный и абстрактный интерфейс для работы с данными.
Для построения графического интерфейса была использована технологическая платформа Java со стандартной библиотекой Swing, что обеспечивает кроссплатформенность приложения. Особое внимание было уделено созданию интуитивно понятного и визуально согласованного пользовательского опыта за счет применения единой цветовой схемы, набора шрифтов и специально разработанных компонентов для отображения таблиц и списков.
5.2. Основные функциональные модули
Функционал клиентского приложения разделен на несколько логических модулей, каждый из которых решает конкретную задачу в рамках общего процесса заказа.
5.2.1. Подсистема аутентификации
Данная подсистема является точкой входа в приложение и обеспечивает безопасный доступ к персонализированным функциям системы. Она включает два основных процесса:
• Регистрация нового пользователя: Предоставляет возможность создания новой учетной записи. Система запрашивает у пользователя уникальный логин, адрес электронной почты и пароль. Для обеспечения безопасности пароли не хранятся в открытом виде, а подвергаются криптографическому хэшированию с использованием стойкого алгоритма, что делает невозможным их восстановление. Перед созданием аккаунта система выполняет проверку на уникальность вводимых данных в базе данных.
• Авторизация пользователя: Позволяет существующим пользователям войти в систему. После успешного прохождения аутентификации система создает пользовательскую сессию, в рамках которой сохраняется информация о текущем пользователе и его персональной корзине. Это позволяет бесшовно передавать контекст между различными модулями приложения.
[ИЛЛЮСТРАЦИЯ 1: Скриншот окна авторизации и регистрации. На изображении должны быть видны поля для ввода данных, кнопки "Войти" и "Зарегистрироваться", а также возможность переключения между двумя формами.]
5.2.2. Модуль каталога товаров
После авторизации пользователь получает доступ к каталогу товаров. Этот модуль служит витриной для демонстрации доступной к заказу продукции.
• Отображение товаров: Продукция загружается из базы данных и представляется в виде интерактивного списка. Для каждого товара отображается ключевая информация: наименование, цена и, что важно, актуальное количество на складе. Это позволяет пользователю принимать взвешенное решение о покупке, основываясь на наличии товара.
• Добавление в корзину: Пользователь может выбрать интересующий его товар и добавить его в корзину. Система автоматически проверяет, доступен ли товар для заказа, прежде чем выполнить операцию.
[ИЛЛЮСТРАЦИЯ 2: Скриншот панели каталога товаров. Изображение должно демонстрировать список из нескольких товаров с указанием названия, цены и количества. Один из товаров может быть выделен для наглядности.]
5.2.3. Модуль управления корзиной
Корзина является промежуточным этапом перед оформлением заказа. В этом модуле пользователь может просматривать и редактировать свой текущий выбор.
• Состав корзины: Выбранные товары отображаются в табличном виде, где для каждой позиции указаны наименование, цена за единицу, выбранное количество и итоговая стоимость по данной позиции.
• Интерактивное управление: Пользователю доступны функции изменения количества любого товара, при этом общая стоимость как позиции, так и всего заказа, пересчитывается в режиме реального времени. Также возможно удаление отдельных позиций или полная очистка корзины. В нижней части панели постоянно отображается общая сумма заказа.
[ИЛЛЮСТРАЦИЯ 3: Скриншот панели корзины. На скриншоте должна быть таблица с несколькими товарами, элементы управления для изменения количества (например, спиннеры), кнопка "Удалить" и итоговая сумма заказа.]
5.2.4. Модуль оформления доставки
Это финальный шаг, на котором пользователь подтверждает свой заказ и указывает детали доставки.
• Ввод данных: Пользователю предлагается форма для ввода адреса, выбора типа доставки (например, стандартная или экспресс) и добавления необязательных примечаний к заказу.
• Транзакционная обработка заказа: После подтверждения система запускает сложный процесс, который для обеспечения целостности данных выполняется как единая атомарная транзакция. Этот процесс включает в себя создание записи о новом заказе, перенос товаров из корзины в детализацию заказа, обновление складских остатков и очистку корзины пользователя. В случае сбоя на любом из этапов (например, если товар закончился на складе в момент оформления) вся транзакция откатывается, и данные остаются в согласованном состоянии.
[ИЛЛЮСТРАЦИЯ 4: Скриншот панели оформления доставки, где видны поля для ввода адреса, выбора типа доставки и кнопка подтверждения заказа.]
5.2.5. Модуль истории и профиля пользователя
Для обеспечения прозрачности и удобства система предоставляет пользователю доступ к его персональной информации и архиву заказов.
• История заказов: В данном разделе отображается полная история всех совершенных пользователем заказов в виде таблицы. Для каждого заказа доступна информация о дате, сумме, статусе, адресе доставки и его содержимом.
• Профиль пользователя: Здесь отображаются основные данные учетной записи (логин, email). Ключевой функцией данного модуля является предоставление возможности безопасного завершения сеанса работы (выход из системы), что очищает данные сессии и возвращает приложение в состояние аутентификации.
[ИЛЛЮСТРАЦИЯ 5: Комбинированный скриншот или два отдельных, показывающих панель истории заказов с таблицей и панель профиля пользователя.]
6. БАЗА ДАННЫХ
Для хранения всей информации, необходимой для функционирования системы, была выбрана объектно-реляционная система управления базами данных (СУБД) PostgreSQL.
6.1. Схема взаимодействия и обеспечение целостности
Взаимодействие клиентского приложения с СУБД осуществляется посредством технологии JDBC (Java Database Connectivity), которая является стандартом для работы с базами данных на платформе Java.
Для инкапсуляции логики подключения и централизации управления соединениями в приложении реализован специализированный программный модуль. Он абстрагирует низкоуровневые детали, такие как URL базы данных и учетные данные, предоставляя остальным частям системы унифицированный метод для получения активного соединения.
Ключевую роль в обеспечении целостности данных играют транзакции. Все критически важные, многоэтапные операции, такие как регистрация пользователя и, в особенности, оформление заказа, обернуты в транзакционные блоки. Это гарантирует, что либо все операции внутри блока будут успешно завершены (commit), либо, в случае возникновения любой ошибки, система вернется в исходное состояние (rollback), предотвращая появление несогласованных или частично сохраненных данных.
6.2. Логическая модель данных
Логическая модель данных спроектирована для эффективного хранения информации об основных сущностях системы и связях между ними.
[ИЛЛЮСТРАЦИЯ 6: ER-диаграмма (Entity-Relationship Diagram) базы данных. Диаграмма должна визуально представлять таблицы (сущности) и связи (relations) между ними, показывая первичные и внешние ключи.]
• Сущность «Пользователи» (users): Предназначена для хранения аутентификационных и персональных данных клиентов. Включает уникальный идентификатор, логин и хэшированный пароль, контактную информацию и дату регистрации.
• Сущность «Товары» (products): Справочник всей доступной продукции. Содержит уникальный идентификатор товара, его наименование, описание, цену и, что критически важно, текущий остаток на складе.
• Сущность «Корзина» (cart): Персонализированная корзина, однозначно связанная с пользователем. Служит для временного хранения выбранных товаров.
• Сущность «Содержимое корзины» (cart_items): Связующая таблица, которая детализирует состав каждой корзины, указывая, какой товар и в каком количестве в нее добавлен.
• Сущность «Заказы» (orders): Содержит основную информацию об оформленных заказах: идентификатор пользователя, итоговую сумму, выбранный статус, детали доставки и дату создания.
• Сущность «Содержимое заказа» (order_items): Детализация каждого заказа. Эта связующая таблица хранит информацию о том, какие товары, в каком количестве и по какой цене были включены в конкретный заказ. Наличие поля price_at_purchase (цена на момент покупки) является важным архитектурным решением, которое обеспечивает историческую точность данных, так как цены на товары могут меняться со временем. 